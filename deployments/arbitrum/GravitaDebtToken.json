{
  "address": "0x894134a25a5faC1c2C26F1d8fBf05111a3CB9487",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "CallOFTReceivedSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "EmergencyStopMintingCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_vesselManagerAddress",
          "type": "address"
        }
      ],
      "name": "GravitaAddressesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NonContractAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "feeBp",
          "type": "uint16"
        }
      ],
      "name": "SetDefaultFeeBp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "dstchainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "feeBp",
          "type": "uint16"
        }
      ],
      "name": "SetFeeBp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeOwner",
          "type": "address"
        }
      ],
      "name": "SetFeeOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_whitelisted",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BP_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_EXTRA_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND_AND_CALL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperationsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFromWhitelistedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_from",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasForCall",
          "type": "uint256"
        }
      ],
      "name": "callOnOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainIdToFeeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "feeBP",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "creditedPackets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeBp",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "emergencyStopMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emergencyStopMintingCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendAndCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintFromWhitelistedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "quoteOFTFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "returnFromPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendToPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vesselManagerAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_feeBp",
          "type": "uint16"
        }
      ],
      "name": "setDefaultFeeBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "_feeBp",
          "type": "uint16"
        }
      ],
      "name": "setFeeBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeOwner",
          "type": "address"
        }
      ],
      "name": "setFeeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesselManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x572446e215b10902d4cc923bde53185f453b3b0f42f27b198c440862d1fca5df",
  "receipt": {
    "to": null,
    "from": "0xfC8d2f6d1937cd4CcAaD5c26FBB42a3dfc9dAc85",
    "contractAddress": "0x894134a25a5faC1c2C26F1d8fBf05111a3CB9487",
    "transactionIndex": 1,
    "gasUsed": "26663795",
    "logsBloom": "0x
    "blockHash": "0xaedc81064970c2737df4f27f44c0044abceb66a2f826235572680f3ad9d7aa7b",
    "transactionHash": "0x572446e215b10902d4cc923bde53185f453b3b0f42f27b198c440862d1fca5df",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 105936824,
        "transactionHash": "0x572446e215b10902d4cc923bde53185f453b3b0f42f27b198c440862d1fca5df",
        "address": "0x894134a25a5faC1c2C26F1d8fBf05111a3CB9487",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc8d2f6d1937cd4ccaad5c26fbb42a3dfc9dac85"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaedc81064970c2737df4f27f44c0044abceb66a2f826235572680f3ad9d7aa7b"
      }
    ],
    "blockNumber": 105936824,
    "cumulativeGasUsed": "26663795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c2269811836af69497E5F486A85D7316753cf62"
  ],
  "numDeployments": 1,
  "solcInputHash": "e02436b33397caa927d479bbb91d717c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"CallOFTReceivedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"EmergencyStopMintingCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vesselManagerAddress\",\"type\":\"address\"}],\"name\":\"GravitaAddressesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NonContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBp\",\"type\":\"uint16\"}],\"name\":\"SetDefaultFeeBp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dstchainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBp\",\"type\":\"uint16\"}],\"name\":\"SetFeeBp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeOwner\",\"type\":\"address\"}],\"name\":\"SetFeeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelisted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_EXTRA_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND_AND_CALL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFromWhitelistedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_from\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasForCall\",\"type\":\"uint256\"}],\"name\":\"callOnOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainIdToFeeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"feeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"creditedPackets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeBp\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"emergencyStopMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emergencyStopMintingCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendAndCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintFromWhitelistedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"quoteOFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vesselManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeBp\",\"type\":\"uint16\"}],\"name\":\"setDefaultFeeBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_feeBp\",\"type\":\"uint16\"}],\"name\":\"setFeeBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeOwner\",\"type\":\"address\"}],\"name\":\"setFeeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesselManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"circulatingSupply()\":{\"details\":\"returns the circulating amount of tokens on current chain\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"estimateSendFee(uint16,bytes32,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendFrom(address,uint16,bytes32,uint256,uint256,(address,address,bytes))\":{\"details\":\"send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_minAmount` the minimum amount of tokens to receive on dstChain `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"token()\":{\"details\":\"returns the address of the ERC20 token\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Gravita Debt Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gravita/GravitaDebtToken.sol\":\"GravitaDebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/gravita/GravitaDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/oft/v2/OFTV2.sol\\\";\\n\\n/// @title Gravita Debt Token\\n/// @notice This contract locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.\\ncontract GravitaDebtToken is OFTV2 {\\n    constructor(address _layerZeroEndpoint) OFTV2(\\\"Gravita Debt Token\\\", \\\"GRAI\\\", _layerZeroEndpoint) {}\\n}\\n\",\"keccak256\":\"0x773fb3c45dfd5ed9c67c4e1838018f1164d7f78640c4c4e1b4c7c1f2397d821a\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10_000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x258ba3b90af65099612b23529d2e1f54938a415665f86c3be9ed2b661d043178\",\"license\":\"MIT\"},\"contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2afd4980a5850f45f2c4d7ec44d77b292a51b80f847566479548f89572065311\",\"license\":\"MIT\"},\"contracts/token/oft/v2/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d034ba786436c1fce8057352c87373098bd1d8026b24c8fbc7be28636d0c15d\",\"license\":\"MIT\"},\"contracts/token/oft/v2/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xf57e437ced3bc10bb333123bb49475dab47c7615b86401c4d872c29ad4928fd5\",\"license\":\"BUSL-1.1\"},\"contracts/token/oft/v2/OFTCoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../../../util/ExcessivelySafeCall.sol\\\";\\nimport \\\"./ICommonOFT.sol\\\";\\nimport \\\"./IOFTReceiverV2.sol\\\";\\n\\nabstract contract OFTCoreV2 is NonblockingLzApp {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint8 public constant PT_SEND = 0;\\n    uint8 public constant PT_SEND_AND_CALL = 1;\\n\\n    uint8 public constant sharedDecimals = 6;\\n\\n    bool public useCustomAdapterParams;\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event NonContractAddress(address _address);\\n\\n    // _sharedDecimals should be the minimum decimals on all chains\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        require(_lzEndpoint != address(0), \\\"Invalid address\\\");\\n    }\\n\\n    /************************************************************************\\n     * public functions\\n     ************************************************************************/\\n    function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\\n        require(_msgSender() == address(this), \\\"OFTCore: caller must be OFTCore\\\");\\n\\n        // send\\n        _amount = _transferFrom(address(this), _to, _amount);\\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\\n\\n        // call\\n        if (!_isContract(_to)) {\\n            emit NonContractAddress(_to);\\n            return;\\n        }\\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    /************************************************************************\\n     * internal functions\\n     ************************************************************************/\\n    function _estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendAndCall()\\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint8 packetType = _payload.toUint8(0);\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else if (packetType == PT_SEND_AND_CALL) {\\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        (amount, ) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\\n        if (to == address(0)) {\\n            to = address(0xdead);\\n        }\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\\n\\n        (amount, ) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        // encode the msg.sender into the payload instead of _from\\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\\n\\n        mapping(uint64 => bool) storage nonces = creditedPackets[_srcChainId][_srcAddress];\\n        bool credited = nonces[_nonce];\\n        uint amount = _sd2ld(amountSD);\\n\\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\\n        if (!credited) {\\n            amount = _creditTo(_srcChainId, address(this), amount);\\n            nonces[_nonce] = true;\\n        }\\n\\n        // workaround for stack too deep\\n        uint16 srcChainId = _srcChainId;\\n        bytes memory srcAddress = _srcAddress;\\n        uint64 nonce = _nonce;\\n        bytes memory payload = _payload;\\n        bytes32 from_ = from;\\n        address to_ = to;\\n        uint amount_ = amount;\\n        bytes memory payloadForCall_ = payloadForCall;\\n\\n        // no gas limit for the call if retry\\n        uint gas = credited ? gasleft() : gasForCall;\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas));\\n\\n        if (success) {\\n            bytes32 hash = keccak256(payload);\\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\\n        } else {\\n            // store the failed message into the nonblockingLzApp\\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\\n        }\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _ld2sd(uint _amount) internal view virtual returns (uint64) {\\n        uint amountSD = _amount / _ld2sdRate();\\n        require(amountSD <= type(uint64).max, \\\"OFTCore: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _sd2ld(uint64 _amountSD) internal view virtual returns (uint) {\\n        return _amountSD * _ld2sdRate();\\n    }\\n\\n    function _removeDust(uint _amount) internal view virtual returns (uint amountAfter, uint dust) {\\n        dust = _amount % _ld2sdRate();\\n        amountAfter = _amount - dust;\\n    }\\n\\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal view virtual returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\\n    }\\n\\n    function _decodeSendPayload(bytes memory _payload) internal view virtual returns (address to, uint64 amountSD) {\\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n    }\\n\\n    function _encodeSendAndCallPayload(address _from, bytes32 _toAddress, uint64 _amountSD, bytes memory _payload, uint64 _dstGasForCall) internal view virtual returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND_AND_CALL, _toAddress, _amountSD, _addressToBytes32(_from), _dstGasForCall, _payload);\\n    }\\n\\n    function _decodeSendAndCallPayload(bytes memory _payload) internal view virtual returns (bytes32 from, address to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n        from = _payload.toBytes32(41);\\n        dstGasForCall = _payload.toUint64(73);\\n        payload = _payload.slice(81, _payload.length - 81);\\n    }\\n\\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\\n\\n    function _ld2sdRate() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0xf3ec70a8443f5e271d703eb78440bbf2d9b90cb403cd94717cbd5ee6e32dc56b\",\"license\":\"MIT\"},\"contracts/token/oft/v2/OFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./fee/BaseOFTWithFee.sol\\\";\\n\\ncontract OFTV2 is BaseOFTWithFee, ERC20 {\\n    event EmergencyStopMintingCollateral(address _asset, bool state);\\n    event WhitelistChanged(address _whitelisted, bool whitelisted);\\n    event GravitaAddressesChanged(address _borrowerOperationsAddress, address _stabilityPoolAddress, address _vesselManagerAddress);\\n\\n    mapping(address => bool) public emergencyStopMintingCollateral;\\n\\n    uint internal immutable ld2sdRate;\\n    address public borrowerOperationsAddress;\\n    address public stabilityPoolAddress;\\n    address public vesselManagerAddress;\\n\\n    // stores SC addresses that are allowed to mint/burn the token (FeeCollector, AMO strategies)\\n    mapping(address => bool) public whitelistedContracts;\\n\\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTWithFee(_lzEndpoint) {\\n        uint8 decimals = decimals();\\n        ld2sdRate = 10 ** (decimals - sharedDecimals);\\n    }\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(msg.sender == borrowerOperationsAddress, \\\"DebtToken: Caller is not BorrowerOperations\\\");\\n    }\\n\\n    function _requireCallerIsBOorVesselMorSP() internal view {\\n        require(msg.sender == borrowerOperationsAddress || msg.sender == vesselManagerAddress || msg.sender == stabilityPoolAddress, \\\"DebtToken: Caller is neither BorrowerOperations nor VesselManager nor StabilityPool\\\");\\n    }\\n\\n    function _requireCallerIsWhitelistedContract() internal view {\\n        require(whitelistedContracts[msg.sender], \\\"DebtToken: Caller is not a whitelisted SC\\\");\\n    }\\n\\n    /************************************************************************\\n     * public functions\\n     ************************************************************************/\\n    function emergencyStopMinting(address _asset, bool status) external onlyOwner {\\n        emergencyStopMintingCollateral[_asset] = status;\\n        emit EmergencyStopMintingCollateral(_asset, status);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    function mint(address _asset, address _account, uint256 _amount) external {\\n        _requireCallerIsBorrowerOperations();\\n        require(!emergencyStopMintingCollateral[_asset], \\\"Mint is blocked on this collateral\\\");\\n\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external {\\n        _requireCallerIsBOorVesselMorSP();\\n        _burn(_account, _amount);\\n    }\\n\\n    function mintFromWhitelistedContract(uint256 _amount) external {\\n        _requireCallerIsWhitelistedContract();\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    function burnFromWhitelistedContract(uint256 _amount) external {\\n        _requireCallerIsWhitelistedContract();\\n        _burn(msg.sender, _amount);\\n    }\\n\\n    function sendToPool(address _sender, address _poolAddress, uint256 _amount) external {\\n        _requireCallerIsStabilityPool();\\n        _transfer(_sender, _poolAddress, _amount);\\n    }\\n\\n    function returnFromPool(address _poolAddress, address _receiver, uint256 _amount) external {\\n        _requireCallerIsVesselMorSP();\\n        _transfer(_poolAddress, _receiver, _amount);\\n    }\\n\\n    function setAddresses(address _borrowerOperationsAddress, address _stabilityPoolAddress, address _vesselManagerAddress) public onlyOwner {\\n        require(_isContract(_borrowerOperationsAddress), \\\"Invalid contract address\\\");\\n        require(_isContract(_stabilityPoolAddress), \\\"Invalid contract address\\\");\\n        require(_isContract(_vesselManagerAddress), \\\"Invalid contract address\\\");\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        vesselManagerAddress = _vesselManagerAddress;\\n        emit GravitaAddressesChanged(_borrowerOperationsAddress, _stabilityPoolAddress, _vesselManagerAddress);\\n    }\\n\\n    function addWhitelist(address _address) external onlyOwner {\\n        whitelistedContracts[_address] = true;\\n        emit WhitelistChanged(_address, true);\\n    }\\n\\n    function removeWhitelist(address _address) external onlyOwner {\\n        whitelistedContracts[_address] = false;\\n        emit WhitelistChanged(_address, false);\\n    }\\n\\n    /************************************************************************\\n     * internal functions\\n     ************************************************************************/\\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\\n        _requireValidRecipient(_toAddress);\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\\n        _requireValidRecipient(_to);\\n        address spender = _msgSender();\\n        // if transfer from this contract, no need to check allowance\\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\\n        _transfer(_from, _to, _amount);\\n        return _amount;\\n    }\\n\\n    function _requireValidRecipient(address _recipient) internal view {\\n        require(_recipient != address(0) && _recipient != address(this), \\\"DebtToken: Cannot transfer tokens directly to the token contract or the zero address\\\");\\n    }\\n\\n    function _ld2sdRate() internal view virtual override returns (uint) {\\n        return ld2sdRate;\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(msg.sender == stabilityPoolAddress, \\\"DebtToken: Caller is not the StabilityPool\\\");\\n    }\\n\\n    function _requireCallerIsVesselMorSP() internal view {\\n        require(msg.sender == vesselManagerAddress || msg.sender == stabilityPoolAddress, \\\"DebtToken: Caller is neither VesselManager nor StabilityPool\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2ce8cb33e771960566eca750bca1f3a25f67491ae8e6ed84d621bb3983cbb674\",\"license\":\"MIT\"},\"contracts/token/oft/v2/fee/BaseOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OFTCoreV2.sol\\\";\\nimport \\\"./IOFTWithFee.sol\\\";\\nimport \\\"./Fee.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract BaseOFTWithFee is OFTCoreV2, Fee, ERC165, IOFTWithFee {\\n    constructor(address _lzEndpoint) OFTCoreV2(_lzEndpoint) {}\\n\\n    /************************************************************************\\n     * public functions\\n     ************************************************************************/\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) public payable virtual override {\\n        (_amount, ) = _payOFTFee(_from, _dstChainId, _amount);\\n        _amount = _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n        require(_amount >= _minAmount, \\\"BaseOFTWithFee: amount is less than minAmount\\\");\\n    }\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\\n        (_amount, ) = _payOFTFee(_from, _dstChainId, _amount);\\n        _amount = _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n        require(_amount >= _minAmount, \\\"BaseOFTWithFee: amount is less than minAmount\\\");\\n    }\\n\\n    /************************************************************************\\n     * public view functions\\n     ************************************************************************/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTWithFee).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint);\\n\\n    function token() public view virtual override returns (address);\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override(Fee, OFTCoreV2) returns (uint);\\n}\\n\",\"keccak256\":\"0x12f59b40226c85bb5b1e405d70efd4ea9da3df2c69dca0b5dd3a6106787998e1\",\"license\":\"MIT\"},\"contracts/token/oft/v2/fee/Fee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Fee is Ownable {\\n    uint public constant BP_DENOMINATOR = 10_000;\\n\\n    mapping(uint16 => FeeConfig) public chainIdToFeeBps;\\n    uint16 public defaultFeeBp;\\n    address public feeOwner; // defaults to owner\\n\\n    struct FeeConfig {\\n        uint16 feeBP;\\n        bool enabled;\\n    }\\n\\n    event SetFeeBp(uint16 dstchainId, bool enabled, uint16 feeBp);\\n    event SetDefaultFeeBp(uint16 feeBp);\\n    event SetFeeOwner(address feeOwner);\\n\\n    constructor() {\\n        feeOwner = owner();\\n    }\\n\\n    function setDefaultFeeBp(uint16 _feeBp) public virtual onlyOwner {\\n        require(_feeBp <= BP_DENOMINATOR, \\\"Fee: fee bp must be <= BP_DENOMINATOR\\\");\\n        defaultFeeBp = _feeBp;\\n        emit SetDefaultFeeBp(defaultFeeBp);\\n    }\\n\\n    function setFeeBp(uint16 _dstChainId, bool _enabled, uint16 _feeBp) public virtual onlyOwner {\\n        require(_feeBp <= BP_DENOMINATOR, \\\"Fee: fee bp must be <= BP_DENOMINATOR\\\");\\n        chainIdToFeeBps[_dstChainId] = FeeConfig({feeBP: _feeBp, enabled: _enabled});\\n        emit SetFeeBp(_dstChainId, _enabled, _feeBp);\\n    }\\n\\n    function setFeeOwner(address _feeOwner) public virtual onlyOwner {\\n        require(_feeOwner != address(0x0), \\\"Fee: feeOwner cannot be 0x\\\");\\n        feeOwner = _feeOwner;\\n        emit SetFeeOwner(_feeOwner);\\n    }\\n\\n    function quoteOFTFee(uint16 _dstChainId, uint _amount) public view virtual returns (uint fee) {\\n        FeeConfig memory config = chainIdToFeeBps[_dstChainId];\\n        if (config.enabled) {\\n            fee = (_amount * config.feeBP) / BP_DENOMINATOR;\\n        } else if (defaultFeeBp > 0) {\\n            fee = (_amount * defaultFeeBp) / BP_DENOMINATOR;\\n        } else {\\n            fee = 0;\\n        }\\n    }\\n\\n    function _payOFTFee(address _from, uint16 _dstChainId, uint _amount) internal virtual returns (uint amount, uint fee) {\\n        fee = quoteOFTFee(_dstChainId, _amount);\\n        unchecked {\\n            amount = _amount - fee;\\n        }\\n        if (fee > 0) {\\n            _transferFrom(_from, feeOwner, fee);\\n        }\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\\n}\\n\",\"keccak256\":\"0xeff38c2bb0d1b61f98cbfefb79d15f06286fa94c49bdf47786c76b6c065b04d3\",\"license\":\"MIT\"},\"contracts/token/oft/v2/fee/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTWithFee is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_minAmount` the minimum amount of tokens to receive on dstChain\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0x1b86d8e77c99346edadfb4ee06f6a5c88ca3b777474cc9f13b88514fe7b9215c\",\"license\":\"MIT\"},\"contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200572d3803806200572d83398101604081905262000034916200028b565b6040518060400160405280601281526020017123b930bb34ba30902232b13a102a37b5b2b760711b815250604051806040016040528060048152602001634752414960e01b815250828282828080806200009d620000976200018c60201b60201c565b62000190565b6001600160a01b03908116608052821615159050620000f45760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640160405180910390fd5b5050600054600980546001600160a01b03909216620100000262010000600160b01b031990921691909117905581516200013690600d906020850190620001e5565b5080516200014c90600e906020840190620001e5565b505050600062000161620001e060201b60201c565b905062000170600682620002d3565b6200017d90600a620003f8565b60a05250620004469350505050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601290565b828054620001f39062000409565b90600052602060002090601f01602090048101928262000217576000855562000262565b82601f106200023257805160ff191683800117855562000262565b8280016001018555821562000262579182015b828111156200026257825182559160200191906001019062000245565b506200027092915062000274565b5090565b5b8082111562000270576000815560010162000275565b6000602082840312156200029e57600080fd5b81516001600160a01b0381168114620002b657600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015620002f057620002f0620002bd565b90039392505050565b600181815b808511156200033a5781600019048211156200031e576200031e620002bd565b808516156200032c57918102915b93841c9390800290620002fe565b509250929050565b6000826200035357506001620003f2565b816200036257506000620003f2565b81600181146200037b57600281146200038657620003a6565b6001915050620003f2565b60ff8411156200039a576200039a620002bd565b50506001821b620003f2565b5060208310610133831016604e8410600b8410161715620003cb575081810a620003f2565b620003d78383620002f9565b8060001904821115620003ee57620003ee620002bd565b0290505b92915050565b6000620002b660ff84168362000342565b600181811c908216806200041e57607f821691505b602082108114156200044057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051615274620004b96000396000818161375b015281816137cd0152613f2e015260008181610b0201528181610e260152818161113e015281816111fe015281816115e301528181611ef00152818161259a01528181612cf10152818161329e015261397501526152746000f3fe6080604052600436106104305760003560e01c80639358928b11610229578063c44618341161012e578063eab45d9c116100b6578063f2fde38b1161007a578063f2fde38b14610d90578063f5ecbdbc14610db0578063f7f4d9da14610dd0578063f80f5dd514610df0578063fc0c546a14610e1057600080fd5b8063eab45d9c14610cf6578063eaffd49a14610d16578063eb8d72b714610d36578063ecd8f21214610d56578063ed629c5c14610d7657600080fd5b8063d1deba1f116100fd578063d1deba1f14610c60578063d888296814610c73578063dd62ed3e14610ca1578063df2a5b3b14610cc1578063e6a20ae614610ce157600080fd5b8063c446183414610ada578063c6c3bbe614610bca578063c83330ce14610bea578063cbed8b9c14610c4057600080fd5b8063a6c3d165116101b1578063b7f8cf9b11610180578063b7f8cf9b14610b24578063b95aac7614610b44578063b9818be114610b64578063baf3292d14610b8a578063bb997bac14610baa57600080fd5b8063a6c3d16514610a9a578063a9059cbb14610aba578063abe685cd14610ada578063b353aaa714610af057600080fd5b80639dc29fac116101f85780639dc29fac146109ea5780639f38369a14610a0a578063a1285d1714610a2a578063a457c2d714610a5a578063a4c51df514610a7a57600080fd5b80639358928b1461094e578063950c8a741461096357806395d89b41146109835780639bdb98121461099857600080fd5b80633d8b38f61161033a5780635b8c41e6116102c257806378c8cda71161028657806378c8cda7146108a357806379c0ad4b146108c3578063857749b0146108e35780638cfd8f5c146108f85780638da5cb5b1461093057600080fd5b80635b8c41e6146107c957806366ad5c8a1461081857806370a0823114610838578063715018a61461086e5780637533d7881461088357600080fd5b8063455ba27d11610309578063455ba27d146107415780634b104eff146107545780634c42899a146107745780635a359dc5146107895780635b32a439146107a957600080fd5b80633d8b38f6146106bf5780633f1f4fa4146106df57806342d65a8d1461070c578063447705151461072c57600080fd5b806320c582be116103bd578063359959071161038c57806335995907146105fa578063363bf9641461061a578063365260b41461063a578063391feebb1461066f578063395093511461069f57600080fd5b806320c582be1461058557806323b872dd146105a55780632cdf0b95146105c5578063313ce567146105d857600080fd5b8063095ea7b311610404578063095ea7b3146104ce5780630b622ab2146104ee5780630df374831461052657806310ddb1371461054657806318160ddd1461056657600080fd5b80621d35671461043557806301ffc9a71461045757806306fdde031461048c57806307e0db17146104ae575b600080fd5b34801561044157600080fd5b50610455610450366004614327565b610e23565b005b34801561046357600080fd5b506104776104723660046143ba565b611054565b60405190151581526020015b60405180910390f35b34801561049857600080fd5b506104a161108b565b604051610483919061443c565b3480156104ba57600080fd5b506104556104c936600461444f565b61111d565b3480156104da57600080fd5b506104776104e936600461447f565b6111a6565b3480156104fa57600080fd5b5060115461050e906001600160a01b031681565b6040516001600160a01b039091168152602001610483565b34801561053257600080fd5b506104556105413660046144ab565b6111be565b34801561055257600080fd5b5061045561056136600461444f565b6111dd565b34801561057257600080fd5b50600c545b604051908152602001610483565b34801561059157600080fd5b506104556105a03660046144c7565b611235565b3480156105b157600080fd5b506104776105c03660046144c7565b61124d565b6104556105d3366004614520565b611271565b3480156105e457600080fd5b5060125b60405160ff9091168152602001610483565b34801561060657600080fd5b506104556106153660046145ab565b611314565b34801561062657600080fd5b506104556106353660046145e0565b61137f565b34801561064657600080fd5b5061065a61065536600461462b565b611481565b60408051928352602083019190915201610483565b34801561067b57600080fd5b5061047761068a366004614690565b60136020526000908152604090205460ff1681565b3480156106ab57600080fd5b506104776106ba36600461447f565b6114d6565b3480156106cb57600080fd5b506104776106da3660046146ad565b6114f8565b3480156106eb57600080fd5b506105776106fa36600461444f565b60036020526000908152604090205481565b34801561071857600080fd5b506104556107273660046146ad565b6115c4565b34801561073857600080fd5b50610577600081565b61045561074f3660046146ff565b61164a565b34801561076057600080fd5b5061045561076f366004614690565b61172b565b34801561078057600080fd5b506105e8600081565b34801561079557600080fd5b506104556107a436600461444f565b6117e8565b3480156107b557600080fd5b5060125461050e906001600160a01b031681565b3480156107d557600080fd5b506105776107e4366004614828565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561082457600080fd5b50610455610833366004614327565b61185a565b34801561084457600080fd5b50610577610853366004614690565b6001600160a01b03166000908152600a602052604090205490565b34801561087a57600080fd5b5061045561192e565b34801561088f57600080fd5b506104a161089e36600461444f565b611942565b3480156108af57600080fd5b506104556108be366004614690565b6119dc565b3480156108cf57600080fd5b506104556108de3660046148c8565b611a3b565b3480156108ef57600080fd5b506105e8600681565b34801561090457600080fd5b50610577610913366004614902565b600260209081526000928352604080842090915290825290205481565b34801561093c57600080fd5b506000546001600160a01b031661050e565b34801561095a57600080fd5b50610577611aee565b34801561096f57600080fd5b5060045461050e906001600160a01b031681565b34801561098f57600080fd5b506104a1611afe565b3480156109a457600080fd5b506104776109b3366004614828565b6007602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205460ff1681565b3480156109f657600080fd5b50610455610a0536600461447f565b611b0d565b348015610a1657600080fd5b506104a1610a2536600461444f565b611b23565b348015610a3657600080fd5b50610477610a45366004614690565b600f6020526000908152604090205460ff1681565b348015610a6657600080fd5b50610477610a7536600461447f565b611c3a565b348015610a8657600080fd5b5061065a610a9536600461492c565b611cb5565b348015610aa657600080fd5b50610455610ab53660046146ad565b611d44565b348015610ac657600080fd5b50610477610ad536600461447f565b611dca565b348015610ae657600080fd5b5061057761271081565b348015610afc57600080fd5b5061050e7f000000000000000000000000000000000000000000000000000000000000000081565b348015610b3057600080fd5b5060105461050e906001600160a01b031681565b348015610b5057600080fd5b50610455610b5f3660046149e5565b611dd8565b348015610b7057600080fd5b5060095461050e906201000090046001600160a01b031681565b348015610b9657600080fd5b50610455610ba5366004614690565b611ded565b348015610bb657600080fd5b50610455610bc53660046144c7565b611e43565b348015610bd657600080fd5b50610455610be53660046144c7565b611e4b565b348015610bf657600080fd5b50610c26610c0536600461444f565b60086020526000908152604090205461ffff81169062010000900460ff1682565b6040805161ffff9093168352901515602083015201610483565b348015610c4c57600080fd5b50610455610c5b3660046149fe565b611ed1565b610455610c6e366004614327565b611f5b565b348015610c7f57600080fd5b50600954610c8e9061ffff1681565b60405161ffff9091168152602001610483565b348015610cad57600080fd5b50610577610cbc366004614a6c565b612171565b348015610ccd57600080fd5b50610455610cdc366004614aa5565b61219c565b348015610ced57600080fd5b506105e8600181565b348015610d0257600080fd5b50610455610d11366004614ae1565b61224e565b348015610d2257600080fd5b50610455610d31366004614afc565b612297565b348015610d4257600080fd5b50610455610d513660046146ad565b612407565b348015610d6257600080fd5b50610577610d713660046144ab565b612461565b348015610d8257600080fd5b506006546104779060ff1681565b348015610d9c57600080fd5b50610455610dab366004614690565b6124f3565b348015610dbc57600080fd5b506104a1610dcb366004614bc4565b612569565b348015610ddc57600080fd5b50610455610deb3660046149e5565b61261a565b348015610dfc57600080fd5b50610455610e0b366004614690565b61262c565b348015610e1c57600080fd5b503061050e565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ea05760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526001602052604081208054610ebe90614c11565b80601f0160208091040260200160405190810160405280929190818152602001828054610eea90614c11565b8015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b50505050509050805186869050148015610f52575060008151115b8015610f7a575080516020820120604051610f709088908890614c46565b6040518091039020145b610fd55760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610e97565b61104b8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061268f92505050565b50505050505050565b60006001600160e01b03198216630d30953d60e31b148061108557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600d805461109a90614c11565b80601f01602080910402602001604051908101604052809291908181526020018280546110c690614c11565b80156111135780601f106110e857610100808354040283529160200191611113565b820191906000526020600020905b8154815290600101906020018083116110f657829003601f168201915b5050505050905090565b611125612708565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b15801561118b57600080fd5b505af115801561119f573d6000803e3d6000fd5b5050505050565b6000336111b4818585612762565b5060019392505050565b6111c6612708565b61ffff909116600090815260036020526040902055565b6111e5612708565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401611171565b61123d612886565b61124883838361291b565b505050565b60003361125b858285612aeb565b61126685858561291b565b506001949350505050565b61127c868685612b5f565b5092506112ea868686866112936020870187614690565b6112a36040880160208901614690565b6112b06040890189614c56565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ba192505050565b92508183101561130c5760405162461bcd60e51b8152600401610e9790614c9c565b505050505050565b61131c612708565b6001600160a01b0382166000818152600f6020908152604091829020805460ff19168515159081179091558251938452908301527f5bbb1afddf32881824ddeb3fb7fe693cbb0aa35de2ef25c53ad5e8e8d44c2720910160405180910390a15050565b611387612708565b6001600160a01b0383163b6113ae5760405162461bcd60e51b8152600401610e9790614ce9565b6001600160a01b0382163b6113d55760405162461bcd60e51b8152600401610e9790614ce9565b6001600160a01b0381163b6113fc5760405162461bcd60e51b8152600401610e9790614ce9565b601080546001600160a01b038581166001600160a01b0319928316811790935560118054868316908416811790915560128054928616929093168217909255604080519384526020840192909252908201527fe11f9234c5a9af9538a590c5adf2369754a4198fdd39c264262bfce3c8d825d6906060015b60405180910390a1505050565b6000806114c78888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cc592505050565b91509150965096945050505050565b6000336111b48185856114e98383612171565b6114f39190614d36565b612762565b61ffff83166000908152600160205260408120805482919061151990614c11565b80601f016020809104026020016040519081016040528092919081815260200182805461154590614c11565b80156115925780601f1061156757610100808354040283529160200191611592565b820191906000526020600020905b81548152906001019060200180831161157557829003601f168201915b5050505050905083836040516115a9929190614c46565b60405180910390208180519060200120149150509392505050565b6115cc612708565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061161c90869086908690600401614d77565b600060405180830381600087803b15801561163657600080fd5b505af115801561104b573d6000803e3d6000fd5b611655898988612b5f565b50809650506116fe8989898988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506116a79150506020890189614690565b6116b760408a0160208b01614690565b6116c460408b018b614c56565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d7d92505050565b9550848610156117205760405162461bcd60e51b8152600401610e9790614c9c565b505050505050505050565b611733612708565b6001600160a01b0381166117895760405162461bcd60e51b815260206004820152601a60248201527f4665653a206665654f776e65722063616e6e6f742062652030780000000000006044820152606401610e97565b6009805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f047912631afa564eebd3db2efe191a0dec62da1fede6bbbc1ffc89d87845b1b5906020015b60405180910390a150565b6117f0612708565b6127108161ffff1611156118165760405162461bcd60e51b8152600401610e9790614d95565b6009805461ffff191661ffff83169081179091556040519081527fd26030ef4a8c225ee12b646eb4466acb41fb96b6cd4660b22d0ba0124e7bdc74906020016117dd565b3330146118b85760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610e97565b61130c8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612e7992505050565b611936612708565b6119406000612f00565b565b6001602052600090815260409020805461195b90614c11565b80601f016020809104026020016040519081016040528092919081815260200182805461198790614c11565b80156119d45780601f106119a9576101008083540402835291602001916119d4565b820191906000526020600020905b8154815290600101906020018083116119b757829003601f168201915b505050505081565b6119e4612708565b6001600160a01b0381166000818152601360209081526040808320805460ff191690558051938452908301919091527fb840a1dbd8b09a3dc45161bba92dfb9aba643c0e44c085a447f839d1d02cf13b91016117dd565b611a43612708565b6127108161ffff161115611a695760405162461bcd60e51b8152600401610e9790614d95565b60408051808201825261ffff83811680835285151560208085018281528985166000818152600884528890209651875492511515620100000262ffffff1990931696169590951717909455845192835292820192909252918201527fdd9c9685af3e6dcb56d8f4b88d2595d4add6837a150034e7781c46b6dcf8aaab90606001611474565b6000611af9600c5490565b905090565b6060600e805461109a90614c11565b611b15612f50565b611b1f8282613016565b5050565b61ffff8116600090815260016020526040812080546060929190611b4690614c11565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7290614c11565b8015611bbf5780601f10611b9457610100808354040283529160200191611bbf565b820191906000526020600020905b815481529060010190602001808311611ba257829003601f168201915b50505050509050805160001415611c185760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610e97565b611c33600060148351611c2b9190614dda565b839190613164565b9392505050565b60003381611c488286612171565b905083811015611ca85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e97565b6112668286868403612762565b600080611d328b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b81528e93508d9250908c908c908190840183828082843760009201919091525061327192505050565b91509150995099975050505050505050565b611d4c612708565b818130604051602001611d6193929190614df1565b60408051601f1981840301815291815261ffff85166000908152600160209081529190208251611d96939192909101906141a4565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce83838360405161147493929190614d77565b6000336111b481858561291b565b611de061332c565b611dea3382613016565b50565b611df5612708565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020016117dd565b61123d61339d565b611e5361340a565b6001600160a01b0383166000908152600f602052604090205460ff1615611ec75760405162461bcd60e51b815260206004820152602260248201527f4d696e7420697320626c6f636b6564206f6e207468697320636f6c6c61746572604482015261185b60f21b6064820152608401610e97565b6112488282613478565b611ed9612708565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611f2d9088908890889088908890600401614e17565b600060405180830381600087803b158015611f4757600080fd5b505af1158015611720573d6000803e3d6000fd5b61ffff86166000908152600560205260408082209051611f7e9088908890614c46565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611ffe5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610e97565b80838360405161200f929190614c46565b60405180910390201461206e5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610e97565b61ffff871660009081526005602052604080822090516120919089908990614c46565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612129918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612e7992505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612160959493929190614e50565b60405180910390a150505050505050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b6121a4612708565b600081116121ec5760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b6044820152606401610e97565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611474565b612256612708565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a4906020016117dd565b3330146122e65760405162461bcd60e51b815260206004820152601f60248201527f4f4654436f72653a2063616c6c6572206d757374206265204f4654436f7265006044820152606401610e97565b6122f1308686613557565b9350846001600160a01b03168a61ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8660405161233391815260200190565b60405180910390a36001600160a01b0385163b61238b576040516001600160a01b03861681527f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d9060200160405180910390a16123fb565b604051633fe79aed60e11b81526001600160a01b03861690637fcf35da9083906123c7908e908e908e908e908e908d908d908d90600401614e8b565b600060405180830381600088803b1580156123e157600080fd5b5087f11580156123f5573d6000803e3d6000fd5b50505050505b50505050505050505050565b61240f612708565b61ffff8316600090815260016020526040902061242d908383614228565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161147493929190614d77565b61ffff828116600090815260086020908152604080832081518083019092525493841681526201000090930460ff16158015918401919091529091906124c6578051612710906124b59061ffff1685614ee6565b6124bf9190614f1b565b91506124ec565b60095461ffff16156124e757600954612710906124b59061ffff1685614ee6565b600091505b5092915050565b6124fb612708565b6001600160a01b0381166125605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e97565b611dea81612f00565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156125e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126119190810190614f2f565b95945050505050565b61262261332c565b611dea3382613478565b612634612708565b6001600160a01b038116600081815260136020908152604091829020805460ff191660019081179091558251938452908301527fb840a1dbd8b09a3dc45161bba92dfb9aba643c0e44c085a447f839d1d02cf13b91016117dd565b6000806126f25a60966366ad5c8a60e01b898989896040516024016126b79493929190614f9c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152309291906135b2565b915091508161130c5761130c868686868561363c565b6000546001600160a01b031633146119405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e97565b6001600160a01b0383166127c45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e97565b6001600160a01b0382166128255760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e97565b6001600160a01b038381166000818152600b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6012546001600160a01b03163314806128a957506011546001600160a01b031633145b6119405760405162461bcd60e51b815260206004820152603c60248201527f44656274546f6b656e3a2043616c6c6572206973206e6569746865722056657360448201527f73656c4d616e61676572206e6f722053746162696c697479506f6f6c000000006064820152608401610e97565b6001600160a01b03831661297f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e97565b6001600160a01b0382166129e15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e97565b6001600160a01b0383166000908152600a602052604090205481811015612a595760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e97565b6001600160a01b038085166000908152600a6020526040808220858503905591851681529081208054849290612a90908490614d36565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612adc91815260200190565b60405180910390a35b50505050565b6000612af78484612171565b90506000198114612ae55781811015612b525760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610e97565b612ae58484848403612762565b600080612b6c8484612461565b808403925090508015612b9957600954612b979086906201000090046001600160a01b031683613557565b505b935093915050565b6000612baf878284816136d9565b612bb885613753565b509050612bc788888884613793565b905060008111612c155760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610e97565b6000612c6087612c24846137c5565b6040805160006020820152602181019390935260c09190911b6001600160c01b0319166041830152805160298184030181526049909201905290565b9050612c7088828787873461384b565b86896001600160a01b03168961ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a85604051612cb191815260200190565b60405180910390a450979650505050505050565b6000806000612cd787612c24886137c5565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090612d2e908b90309086908b908b90600401614fda565b6040805180830381865afa158015612d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6e919061502e565b92509250509550959350505050565b6000612d95896001846001600160401b0389166136d9565b612d9e87613753565b509050612dad8a8a8a84613793565b905060008111612dfb5760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610e97565b6000612e12338a612e0b856137c5565b8a8a6139f1565b9050612e228a828787873461384b565b888b6001600160a01b03168b61ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a85604051612e6391815260200190565b60405180910390a4509998505050505050505050565b6000612e858282613a32565b905060ff8116612ea057612e9b85858585613a8e565b61119f565b60ff811660011415612eb857612e9b85858585613b1e565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b65742074797065000000006044820152606401610e97565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6010546001600160a01b0316331480612f7357506012546001600160a01b031633145b80612f8857506011546001600160a01b031633145b6119405760405162461bcd60e51b815260206004820152605360248201527f44656274546f6b656e3a2043616c6c6572206973206e65697468657220426f7260448201527f726f7765724f7065726174696f6e73206e6f722056657373656c4d616e6167656064820152721c881b9bdc8814dd18589a5b1a5d1e541bdbdb606a1b608482015260a401610e97565b6001600160a01b0382166130765760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610e97565b6001600160a01b0382166000908152600a6020526040902054818110156130ea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610e97565b6001600160a01b0383166000908152600a602052604081208383039055600c8054849290613119908490614dda565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60608161317281601f614d36565b10156131b15760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610e97565b6131bb8284614d36565b845110156131ff5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610e97565b60608215801561321e5760405191506000825260208201604052613268565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561325757805183526020928301920161323f565b5050858452601f01601f1916604052505b50949350505050565b6000806000613284338a612e0b8b6137c5565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906132db908d90309086908b908b90600401614fda565b6040805180830381865afa1580156132f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331b919061502e565b925092505097509795505050505050565b3360009081526013602052604090205460ff166119405760405162461bcd60e51b815260206004820152602960248201527f44656274546f6b656e3a2043616c6c6572206973206e6f7420612077686974656044820152686c697374656420534360b81b6064820152608401610e97565b6011546001600160a01b031633146119405760405162461bcd60e51b815260206004820152602a60248201527f44656274546f6b656e3a2043616c6c6572206973206e6f742074686520537461604482015269189a5b1a5d1e541bdbdb60b21b6064820152608401610e97565b6010546001600160a01b031633146119405760405162461bcd60e51b815260206004820152602b60248201527f44656274546f6b656e3a2043616c6c6572206973206e6f7420426f72726f776560448201526a724f7065726174696f6e7360a81b6064820152608401610e97565b6001600160a01b0382166134ce5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e97565b80600c60008282546134e09190614d36565b90915550506001600160a01b0382166000908152600a60205260408120805483929061350d908490614d36565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061356283613ca5565b33306001600160a01b0386161480159061358e5750806001600160a01b0316856001600160a01b031614155b1561359e5761359e858285612aeb565b6135a985858561291b565b50909392505050565b6000606060008060008661ffff166001600160401b038111156135d7576135d76147bb565b6040519080825280601f01601f191660200182016040528015613601576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115613623578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff1681526020019081526020016000208560405161366d9190615052565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c906136ca908790879087908790879061506e565b60405180910390a15050505050565b60065460ff16156136f5576136f084848484613d55565b612ae5565b815115612ae55760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b6064820152608401610e97565b6000806137807f0000000000000000000000000000000000000000000000000000000000000000846150c0565b905061378c8184614dda565b9150915091565b6000336001600160a01b03861681146137b1576137b1868285612aeb565b6137bb8684613016565b5090949350505050565b6000806137f27f000000000000000000000000000000000000000000000000000000000000000084614f1b565b90506001600160401b038111156110855760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f770000000000006044820152606401610e97565b61ffff86166000908152600160205260408120805461386990614c11565b80601f016020809104026020016040519081016040528092919081815260200182805461389590614c11565b80156138e25780601f106138b7576101008083540402835291602001916138e2565b820191906000526020600020905b8154815290600101906020018083116138c557829003601f168201915b505050505090508051600014156139545760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610e97565b61395f878751613e34565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c58031009084906139b6908b9086908c908c908c908c906004016150d4565b6000604051808303818588803b1580156139cf57600080fd5b505af11580156139e3573d6000803e3d6000fd5b505050505050505050505050565b6060600185856001600160a01b0389168587604051602001613a189695949392919061513b565b604051602081830303815290604052905095945050505050565b6000613a3f826001614d36565b83511015613a855760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610e97565b50016001015190565b600080613a9a83613ea2565b90925090506001600160a01b038216613ab35761dead91505b6000613abe82613f27565b9050613acb878483613f5c565b9050826001600160a01b03168761ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf83604051613b0d91815260200190565b60405180910390a350505050505050565b6000806000806000613b2f86613f71565b945094509450945094506000600760008b61ffff1661ffff16815260200190815260200160002089604051613b649190615052565b90815260408051602092819003830190206001600160401b038b166000908152928190529082205490925060ff1690613b9c86613f27565b905081613bd457613bae8c3083613f5c565b6001600160401b038b166000908152602085905260409020805460ff1916600117905590505b8b8b8b8b8b8b868b60008a613bf2578c6001600160401b0316613bf4565b5a5b9050600080613c265a609663eaffd49a60e01b8e8e8e8d8d8d8d8d6040516024016126b798979695949392919061519c565b915091508115613c7f578751602089012060405161ffff8d16907fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd88490613c71908e908e908690615210565b60405180910390a250613c8c565b613c8c8b8b8b8b8561363c565b5050505050505050505050505050505050505050505050565b6001600160a01b03811615801590613cc657506001600160a01b0381163014155b611dea5760405162461bcd60e51b815260206004820152605460248201527f44656274546f6b656e3a2043616e6e6f74207472616e7366657220746f6b656e60448201527f73206469726563746c7920746f2074686520746f6b656e20636f6e7472616374606482015273206f7220746865207a65726f206164647265737360601b608482015260a401610e97565b6000613d6083614028565b61ffff808716600090815260026020908152604080832093891683529290529081205491925090613d92908490614d36565b905060008111613de45760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610e97565b8082101561130c5760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610e97565b61ffff821660009081526003602052604090205480613e5257506127105b808211156112485760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610e97565b60008080613eb08482613a32565b60ff16148015613ec1575082516029145b613f085760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610e97565b613f1383600d614084565b9150613f208360216140e9565b9050915091565b60006110857f00000000000000000000000000000000000000000000000000000000000000006001600160401b038416614ee6565b6000613f6783613ca5565b6124ec8383613478565b600080806060816001613f848783613a32565b60ff1614613fcf5760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610e97565b613fda86600d614084565b9350613fe78660216140e9565b9250613ff4866029614146565b94506140018660496140e9565b905061401d60518088516140159190614dda565b889190613164565b915091939590929450565b600060228251101561407c5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610e97565b506022015190565b6000614091826014614d36565b835110156140d95760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610e97565b500160200151600160601b900490565b60006140f6826008614d36565b8351101561413d5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610e97565b50016008015190565b6000614153826020614d36565b8351101561419b5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610e97565b50016020015190565b8280546141b090614c11565b90600052602060002090601f0160209004810192826141d25760008555614218565b82601f106141eb57805160ff1916838001178555614218565b82800160010185558215614218579182015b828111156142185782518255916020019190600101906141fd565b5061422492915061429c565b5090565b82805461423490614c11565b90600052602060002090601f0160209004810192826142565760008555614218565b82601f1061426f5782800160ff19823516178555614218565b82800160010185558215614218579182015b82811115614218578235825591602001919060010190614281565b5b80821115614224576000815560010161429d565b803561ffff811681146142c357600080fd5b919050565b60008083601f8401126142da57600080fd5b5081356001600160401b038111156142f157600080fd5b60208301915083602082850101111561430957600080fd5b9250929050565b80356001600160401b03811681146142c357600080fd5b6000806000806000806080878903121561434057600080fd5b614349876142b1565b955060208701356001600160401b038082111561436557600080fd5b6143718a838b016142c8565b909750955085915061438560408a01614310565b9450606089013591508082111561439b57600080fd5b506143a889828a016142c8565b979a9699509497509295939492505050565b6000602082840312156143cc57600080fd5b81356001600160e01b031981168114611c3357600080fd5b60005b838110156143ff5781810151838201526020016143e7565b83811115612ae55750506000910152565b600081518084526144288160208601602086016143e4565b601f01601f19169290920160200192915050565b602081526000611c336020830184614410565b60006020828403121561446157600080fd5b611c33826142b1565b6001600160a01b0381168114611dea57600080fd5b6000806040838503121561449257600080fd5b823561449d8161446a565b946020939093013593505050565b600080604083850312156144be57600080fd5b61449d836142b1565b6000806000606084860312156144dc57600080fd5b83356144e78161446a565b925060208401356144f78161446a565b929592945050506040919091013590565b60006060828403121561451a57600080fd5b50919050565b60008060008060008060c0878903121561453957600080fd5b86356145448161446a565b9550614552602088016142b1565b945060408701359350606087013592506080870135915060a08701356001600160401b0381111561458257600080fd5b61458e89828a01614508565b9150509295509295509295565b803580151581146142c357600080fd5b600080604083850312156145be57600080fd5b82356145c98161446a565b91506145d76020840161459b565b90509250929050565b6000806000606084860312156145f557600080fd5b83356146008161446a565b925060208401356146108161446a565b915060408401356146208161446a565b809150509250925092565b60008060008060008060a0878903121561464457600080fd5b61464d876142b1565b955060208701359450604087013593506146696060880161459b565b925060808701356001600160401b0381111561468457600080fd5b6143a889828a016142c8565b6000602082840312156146a257600080fd5b8135611c338161446a565b6000806000604084860312156146c257600080fd5b6146cb846142b1565b925060208401356001600160401b038111156146e657600080fd5b6146f2868287016142c8565b9497909650939450505050565b60008060008060008060008060006101008a8c03121561471e57600080fd5b89356147298161446a565b985061473760208b016142b1565b975060408a0135965060608a0135955060808a0135945060a08a01356001600160401b038082111561476857600080fd5b6147748d838e016142c8565b909650945084915061478860c08d01614310565b935060e08c013591508082111561479e57600080fd5b506147ab8c828d01614508565b9150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156147f9576147f96147bb565b604052919050565b60006001600160401b0382111561481a5761481a6147bb565b50601f01601f191660200190565b60008060006060848603121561483d57600080fd5b614846846142b1565b925060208401356001600160401b0381111561486157600080fd5b8401601f8101861361487257600080fd5b803561488561488082614801565b6147d1565b81815287602083850101111561489a57600080fd5b816020840160208301376000602083830101528094505050506148bf60408501614310565b90509250925092565b6000806000606084860312156148dd57600080fd5b6148e6846142b1565b92506148f46020850161459b565b91506148bf604085016142b1565b6000806040838503121561491557600080fd5b61491e836142b1565b91506145d7602084016142b1565b600080600080600080600080600060e08a8c03121561494a57600080fd5b6149538a6142b1565b985060208a0135975060408a0135965060608a01356001600160401b038082111561497d57600080fd5b6149898d838e016142c8565b909850965086915061499d60808d01614310565b95506149ab60a08d0161459b565b945060c08c01359150808211156149c157600080fd5b506149ce8c828d016142c8565b915080935050809150509295985092959850929598565b6000602082840312156149f757600080fd5b5035919050565b600080600080600060808688031215614a1657600080fd5b614a1f866142b1565b9450614a2d602087016142b1565b93506040860135925060608601356001600160401b03811115614a4f57600080fd5b614a5b888289016142c8565b969995985093965092949392505050565b60008060408385031215614a7f57600080fd5b8235614a8a8161446a565b91506020830135614a9a8161446a565b809150509250929050565b600080600060608486031215614aba57600080fd5b614ac3846142b1565b9250614ad1602085016142b1565b9150604084013590509250925092565b600060208284031215614af357600080fd5b611c338261459b565b6000806000806000806000806000806101008b8d031215614b1c57600080fd5b614b258b6142b1565b995060208b01356001600160401b0380821115614b4157600080fd5b614b4d8e838f016142c8565b909b509950899150614b6160408e01614310565b985060608d0135975060808d01359150614b7a8261446a565b90955060a08c0135945060c08c01359080821115614b9757600080fd5b50614ba48d828e016142c8565b9150809450508092505060e08b013590509295989b9194979a5092959850565b60008060008060808587031215614bda57600080fd5b614be3856142b1565b9350614bf1602086016142b1565b92506040850135614c018161446a565b9396929550929360600135925050565b600181811c90821680614c2557607f821691505b6020821081141561451a57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b6000808335601e19843603018112614c6d57600080fd5b8301803591506001600160401b03821115614c8757600080fd5b60200191503681900382131561430957600080fd5b6020808252602d908201527f426173654f4654576974684665653a20616d6f756e74206973206c657373207460408201526c1a185b881b5a5b905b5bdd5b9d609a1b606082015260800190565b60208082526018908201527f496e76616c696420636f6e747261637420616464726573730000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614d4957614d49614d20565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612611604083018486614d4e565b60208082526025908201527f4665653a20666565206270206d757374206265203c3d2042505f44454e4f4d496040820152642720aa27a960d91b606082015260800190565b600082821015614dec57614dec614d20565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600061ffff808816835280871660208401525084604083015260806060830152614e45608083018486614d4e565b979650505050505050565b61ffff86168152608060208201526000614e6e608083018688614d4e565b6001600160401b0394909416604083015250606001529392505050565b61ffff8916815260c060208201526000614ea960c08301898b614d4e565b6001600160401b038816604084015286606084015285608084015282810360a0840152614ed7818587614d4e565b9b9a5050505050505050505050565b6000816000190483118215151615614f0057614f00614d20565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614f2a57614f2a614f05565b500490565b600060208284031215614f4157600080fd5b81516001600160401b03811115614f5757600080fd5b8201601f81018413614f6857600080fd5b8051614f7661488082614801565b818152856020838501011115614f8b57600080fd5b6126118260208301602086016143e4565b61ffff85168152608060208201526000614fb96080830186614410565b6001600160401b03851660408401528281036060840152614e458185614410565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061500890830186614410565b841515606084015282810360808401526150228185614410565b98975050505050505050565b6000806040838503121561504157600080fd5b505080516020909101519092909150565b600082516150648184602087016143e4565b9190910192915050565b61ffff8616815260a06020820152600061508b60a0830187614410565b6001600160401b038616604084015282810360608401526150ac8186614410565b905082810360808401526150228185614410565b6000826150cf576150cf614f05565b500690565b61ffff8716815260c0602082015260006150f160c0830188614410565b82810360408401526151038188614410565b6001600160a01b0387811660608601528616608085015283810360a0850152905061512e8185614410565b9998505050505050505050565b60ff60f81b8760f81b16815285600182015260006001600160401b0360c01b808760c01b166021840152856029840152808560c01b16604984015250825161518a8160518501602087016143e4565b91909101605101979650505050505050565b600061010061ffff8b1683528060208401526151ba8184018b614410565b6001600160401b038a166040850152606084018990526001600160a01b038816608085015260a0840187905283810360c085015290506151fa8186614410565b9150508260e08301529998505050505050505050565b6060815260006152236060830186614410565b6001600160401b03949094166020830152506040015291905056fea2646970667358221220077b75aa9fbdb9f28964a0197b1d23a26a13c0d820ea173d5485a11dae71238b64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106104305760003560e01c80639358928b11610229578063c44618341161012e578063eab45d9c116100b6578063f2fde38b1161007a578063f2fde38b14610d90578063f5ecbdbc14610db0578063f7f4d9da14610dd0578063f80f5dd514610df0578063fc0c546a14610e1057600080fd5b8063eab45d9c14610cf6578063eaffd49a14610d16578063eb8d72b714610d36578063ecd8f21214610d56578063ed629c5c14610d7657600080fd5b8063d1deba1f116100fd578063d1deba1f14610c60578063d888296814610c73578063dd62ed3e14610ca1578063df2a5b3b14610cc1578063e6a20ae614610ce157600080fd5b8063c446183414610ada578063c6c3bbe614610bca578063c83330ce14610bea578063cbed8b9c14610c4057600080fd5b8063a6c3d165116101b1578063b7f8cf9b11610180578063b7f8cf9b14610b24578063b95aac7614610b44578063b9818be114610b64578063baf3292d14610b8a578063bb997bac14610baa57600080fd5b8063a6c3d16514610a9a578063a9059cbb14610aba578063abe685cd14610ada578063b353aaa714610af057600080fd5b80639dc29fac116101f85780639dc29fac146109ea5780639f38369a14610a0a578063a1285d1714610a2a578063a457c2d714610a5a578063a4c51df514610a7a57600080fd5b80639358928b1461094e578063950c8a741461096357806395d89b41146109835780639bdb98121461099857600080fd5b80633d8b38f61161033a5780635b8c41e6116102c257806378c8cda71161028657806378c8cda7146108a357806379c0ad4b146108c3578063857749b0146108e35780638cfd8f5c146108f85780638da5cb5b1461093057600080fd5b80635b8c41e6146107c957806366ad5c8a1461081857806370a0823114610838578063715018a61461086e5780637533d7881461088357600080fd5b8063455ba27d11610309578063455ba27d146107415780634b104eff146107545780634c42899a146107745780635a359dc5146107895780635b32a439146107a957600080fd5b80633d8b38f6146106bf5780633f1f4fa4146106df57806342d65a8d1461070c578063447705151461072c57600080fd5b806320c582be116103bd578063359959071161038c57806335995907146105fa578063363bf9641461061a578063365260b41461063a578063391feebb1461066f578063395093511461069f57600080fd5b806320c582be1461058557806323b872dd146105a55780632cdf0b95146105c5578063313ce567146105d857600080fd5b8063095ea7b311610404578063095ea7b3146104ce5780630b622ab2146104ee5780630df374831461052657806310ddb1371461054657806318160ddd1461056657600080fd5b80621d35671461043557806301ffc9a71461045757806306fdde031461048c57806307e0db17146104ae575b600080fd5b34801561044157600080fd5b50610455610450366004614327565b610e23565b005b34801561046357600080fd5b506104776104723660046143ba565b611054565b60405190151581526020015b60405180910390f35b34801561049857600080fd5b506104a161108b565b604051610483919061443c565b3480156104ba57600080fd5b506104556104c936600461444f565b61111d565b3480156104da57600080fd5b506104776104e936600461447f565b6111a6565b3480156104fa57600080fd5b5060115461050e906001600160a01b031681565b6040516001600160a01b039091168152602001610483565b34801561053257600080fd5b506104556105413660046144ab565b6111be565b34801561055257600080fd5b5061045561056136600461444f565b6111dd565b34801561057257600080fd5b50600c545b604051908152602001610483565b34801561059157600080fd5b506104556105a03660046144c7565b611235565b3480156105b157600080fd5b506104776105c03660046144c7565b61124d565b6104556105d3366004614520565b611271565b3480156105e457600080fd5b5060125b60405160ff9091168152602001610483565b34801561060657600080fd5b506104556106153660046145ab565b611314565b34801561062657600080fd5b506104556106353660046145e0565b61137f565b34801561064657600080fd5b5061065a61065536600461462b565b611481565b60408051928352602083019190915201610483565b34801561067b57600080fd5b5061047761068a366004614690565b60136020526000908152604090205460ff1681565b3480156106ab57600080fd5b506104776106ba36600461447f565b6114d6565b3480156106cb57600080fd5b506104776106da3660046146ad565b6114f8565b3480156106eb57600080fd5b506105776106fa36600461444f565b60036020526000908152604090205481565b34801561071857600080fd5b506104556107273660046146ad565b6115c4565b34801561073857600080fd5b50610577600081565b61045561074f3660046146ff565b61164a565b34801561076057600080fd5b5061045561076f366004614690565b61172b565b34801561078057600080fd5b506105e8600081565b34801561079557600080fd5b506104556107a436600461444f565b6117e8565b3480156107b557600080fd5b5060125461050e906001600160a01b031681565b3480156107d557600080fd5b506105776107e4366004614828565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561082457600080fd5b50610455610833366004614327565b61185a565b34801561084457600080fd5b50610577610853366004614690565b6001600160a01b03166000908152600a602052604090205490565b34801561087a57600080fd5b5061045561192e565b34801561088f57600080fd5b506104a161089e36600461444f565b611942565b3480156108af57600080fd5b506104556108be366004614690565b6119dc565b3480156108cf57600080fd5b506104556108de3660046148c8565b611a3b565b3480156108ef57600080fd5b506105e8600681565b34801561090457600080fd5b50610577610913366004614902565b600260209081526000928352604080842090915290825290205481565b34801561093c57600080fd5b506000546001600160a01b031661050e565b34801561095a57600080fd5b50610577611aee565b34801561096f57600080fd5b5060045461050e906001600160a01b031681565b34801561098f57600080fd5b506104a1611afe565b3480156109a457600080fd5b506104776109b3366004614828565b6007602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205460ff1681565b3480156109f657600080fd5b50610455610a0536600461447f565b611b0d565b348015610a1657600080fd5b506104a1610a2536600461444f565b611b23565b348015610a3657600080fd5b50610477610a45366004614690565b600f6020526000908152604090205460ff1681565b348015610a6657600080fd5b50610477610a7536600461447f565b611c3a565b348015610a8657600080fd5b5061065a610a9536600461492c565b611cb5565b348015610aa657600080fd5b50610455610ab53660046146ad565b611d44565b348015610ac657600080fd5b50610477610ad536600461447f565b611dca565b348015610ae657600080fd5b5061057761271081565b348015610afc57600080fd5b5061050e7f000000000000000000000000000000000000000000000000000000000000000081565b348015610b3057600080fd5b5060105461050e906001600160a01b031681565b348015610b5057600080fd5b50610455610b5f3660046149e5565b611dd8565b348015610b7057600080fd5b5060095461050e906201000090046001600160a01b031681565b348015610b9657600080fd5b50610455610ba5366004614690565b611ded565b348015610bb657600080fd5b50610455610bc53660046144c7565b611e43565b348015610bd657600080fd5b50610455610be53660046144c7565b611e4b565b348015610bf657600080fd5b50610c26610c0536600461444f565b60086020526000908152604090205461ffff81169062010000900460ff1682565b6040805161ffff9093168352901515602083015201610483565b348015610c4c57600080fd5b50610455610c5b3660046149fe565b611ed1565b610455610c6e366004614327565b611f5b565b348015610c7f57600080fd5b50600954610c8e9061ffff1681565b60405161ffff9091168152602001610483565b348015610cad57600080fd5b50610577610cbc366004614a6c565b612171565b348015610ccd57600080fd5b50610455610cdc366004614aa5565b61219c565b348015610ced57600080fd5b506105e8600181565b348015610d0257600080fd5b50610455610d11366004614ae1565b61224e565b348015610d2257600080fd5b50610455610d31366004614afc565b612297565b348015610d4257600080fd5b50610455610d513660046146ad565b612407565b348015610d6257600080fd5b50610577610d713660046144ab565b612461565b348015610d8257600080fd5b506006546104779060ff1681565b348015610d9c57600080fd5b50610455610dab366004614690565b6124f3565b348015610dbc57600080fd5b506104a1610dcb366004614bc4565b612569565b348015610ddc57600080fd5b50610455610deb3660046149e5565b61261a565b348015610dfc57600080fd5b50610455610e0b366004614690565b61262c565b348015610e1c57600080fd5b503061050e565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ea05760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526001602052604081208054610ebe90614c11565b80601f0160208091040260200160405190810160405280929190818152602001828054610eea90614c11565b8015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b50505050509050805186869050148015610f52575060008151115b8015610f7a575080516020820120604051610f709088908890614c46565b6040518091039020145b610fd55760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610e97565b61104b8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061268f92505050565b50505050505050565b60006001600160e01b03198216630d30953d60e31b148061108557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600d805461109a90614c11565b80601f01602080910402602001604051908101604052809291908181526020018280546110c690614c11565b80156111135780601f106110e857610100808354040283529160200191611113565b820191906000526020600020905b8154815290600101906020018083116110f657829003601f168201915b5050505050905090565b611125612708565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b15801561118b57600080fd5b505af115801561119f573d6000803e3d6000fd5b5050505050565b6000336111b4818585612762565b5060019392505050565b6111c6612708565b61ffff909116600090815260036020526040902055565b6111e5612708565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401611171565b61123d612886565b61124883838361291b565b505050565b60003361125b858285612aeb565b61126685858561291b565b506001949350505050565b61127c868685612b5f565b5092506112ea868686866112936020870187614690565b6112a36040880160208901614690565b6112b06040890189614c56565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ba192505050565b92508183101561130c5760405162461bcd60e51b8152600401610e9790614c9c565b505050505050565b61131c612708565b6001600160a01b0382166000818152600f6020908152604091829020805460ff19168515159081179091558251938452908301527f5bbb1afddf32881824ddeb3fb7fe693cbb0aa35de2ef25c53ad5e8e8d44c2720910160405180910390a15050565b611387612708565b6001600160a01b0383163b6113ae5760405162461bcd60e51b8152600401610e9790614ce9565b6001600160a01b0382163b6113d55760405162461bcd60e51b8152600401610e9790614ce9565b6001600160a01b0381163b6113fc5760405162461bcd60e51b8152600401610e9790614ce9565b601080546001600160a01b038581166001600160a01b0319928316811790935560118054868316908416811790915560128054928616929093168217909255604080519384526020840192909252908201527fe11f9234c5a9af9538a590c5adf2369754a4198fdd39c264262bfce3c8d825d6906060015b60405180910390a1505050565b6000806114c78888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612cc592505050565b91509150965096945050505050565b6000336111b48185856114e98383612171565b6114f39190614d36565b612762565b61ffff83166000908152600160205260408120805482919061151990614c11565b80601f016020809104026020016040519081016040528092919081815260200182805461154590614c11565b80156115925780601f1061156757610100808354040283529160200191611592565b820191906000526020600020905b81548152906001019060200180831161157557829003601f168201915b5050505050905083836040516115a9929190614c46565b60405180910390208180519060200120149150509392505050565b6115cc612708565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061161c90869086908690600401614d77565b600060405180830381600087803b15801561163657600080fd5b505af115801561104b573d6000803e3d6000fd5b611655898988612b5f565b50809650506116fe8989898988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506116a79150506020890189614690565b6116b760408a0160208b01614690565b6116c460408b018b614c56565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d7d92505050565b9550848610156117205760405162461bcd60e51b8152600401610e9790614c9c565b505050505050505050565b611733612708565b6001600160a01b0381166117895760405162461bcd60e51b815260206004820152601a60248201527f4665653a206665654f776e65722063616e6e6f742062652030780000000000006044820152606401610e97565b6009805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f047912631afa564eebd3db2efe191a0dec62da1fede6bbbc1ffc89d87845b1b5906020015b60405180910390a150565b6117f0612708565b6127108161ffff1611156118165760405162461bcd60e51b8152600401610e9790614d95565b6009805461ffff191661ffff83169081179091556040519081527fd26030ef4a8c225ee12b646eb4466acb41fb96b6cd4660b22d0ba0124e7bdc74906020016117dd565b3330146118b85760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610e97565b61130c8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612e7992505050565b611936612708565b6119406000612f00565b565b6001602052600090815260409020805461195b90614c11565b80601f016020809104026020016040519081016040528092919081815260200182805461198790614c11565b80156119d45780601f106119a9576101008083540402835291602001916119d4565b820191906000526020600020905b8154815290600101906020018083116119b757829003601f168201915b505050505081565b6119e4612708565b6001600160a01b0381166000818152601360209081526040808320805460ff191690558051938452908301919091527fb840a1dbd8b09a3dc45161bba92dfb9aba643c0e44c085a447f839d1d02cf13b91016117dd565b611a43612708565b6127108161ffff161115611a695760405162461bcd60e51b8152600401610e9790614d95565b60408051808201825261ffff83811680835285151560208085018281528985166000818152600884528890209651875492511515620100000262ffffff1990931696169590951717909455845192835292820192909252918201527fdd9c9685af3e6dcb56d8f4b88d2595d4add6837a150034e7781c46b6dcf8aaab90606001611474565b6000611af9600c5490565b905090565b6060600e805461109a90614c11565b611b15612f50565b611b1f8282613016565b5050565b61ffff8116600090815260016020526040812080546060929190611b4690614c11565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7290614c11565b8015611bbf5780601f10611b9457610100808354040283529160200191611bbf565b820191906000526020600020905b815481529060010190602001808311611ba257829003601f168201915b50505050509050805160001415611c185760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610e97565b611c33600060148351611c2b9190614dda565b839190613164565b9392505050565b60003381611c488286612171565b905083811015611ca85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e97565b6112668286868403612762565b600080611d328b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b81528e93508d9250908c908c908190840183828082843760009201919091525061327192505050565b91509150995099975050505050505050565b611d4c612708565b818130604051602001611d6193929190614df1565b60408051601f1981840301815291815261ffff85166000908152600160209081529190208251611d96939192909101906141a4565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce83838360405161147493929190614d77565b6000336111b481858561291b565b611de061332c565b611dea3382613016565b50565b611df5612708565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020016117dd565b61123d61339d565b611e5361340a565b6001600160a01b0383166000908152600f602052604090205460ff1615611ec75760405162461bcd60e51b815260206004820152602260248201527f4d696e7420697320626c6f636b6564206f6e207468697320636f6c6c61746572604482015261185b60f21b6064820152608401610e97565b6112488282613478565b611ed9612708565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611f2d9088908890889088908890600401614e17565b600060405180830381600087803b158015611f4757600080fd5b505af1158015611720573d6000803e3d6000fd5b61ffff86166000908152600560205260408082209051611f7e9088908890614c46565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611ffe5760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610e97565b80838360405161200f929190614c46565b60405180910390201461206e5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610e97565b61ffff871660009081526005602052604080822090516120919089908990614c46565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252612129918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612e7992505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612160959493929190614e50565b60405180910390a150505050505050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b6121a4612708565b600081116121ec5760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b6044820152606401610e97565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611474565b612256612708565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a4906020016117dd565b3330146122e65760405162461bcd60e51b815260206004820152601f60248201527f4f4654436f72653a2063616c6c6572206d757374206265204f4654436f7265006044820152606401610e97565b6122f1308686613557565b9350846001600160a01b03168a61ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf8660405161233391815260200190565b60405180910390a36001600160a01b0385163b61238b576040516001600160a01b03861681527f9aedf5fdba8716db3b6705ca00150643309995d4f818a249ed6dde6677e7792d9060200160405180910390a16123fb565b604051633fe79aed60e11b81526001600160a01b03861690637fcf35da9083906123c7908e908e908e908e908e908d908d908d90600401614e8b565b600060405180830381600088803b1580156123e157600080fd5b5087f11580156123f5573d6000803e3d6000fd5b50505050505b50505050505050505050565b61240f612708565b61ffff8316600090815260016020526040902061242d908383614228565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161147493929190614d77565b61ffff828116600090815260086020908152604080832081518083019092525493841681526201000090930460ff16158015918401919091529091906124c6578051612710906124b59061ffff1685614ee6565b6124bf9190614f1b565b91506124ec565b60095461ffff16156124e757600954612710906124b59061ffff1685614ee6565b600091505b5092915050565b6124fb612708565b6001600160a01b0381166125605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e97565b611dea81612f00565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156125e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126119190810190614f2f565b95945050505050565b61262261332c565b611dea3382613478565b612634612708565b6001600160a01b038116600081815260136020908152604091829020805460ff191660019081179091558251938452908301527fb840a1dbd8b09a3dc45161bba92dfb9aba643c0e44c085a447f839d1d02cf13b91016117dd565b6000806126f25a60966366ad5c8a60e01b898989896040516024016126b79493929190614f9c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152309291906135b2565b915091508161130c5761130c868686868561363c565b6000546001600160a01b031633146119405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e97565b6001600160a01b0383166127c45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e97565b6001600160a01b0382166128255760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e97565b6001600160a01b038381166000818152600b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6012546001600160a01b03163314806128a957506011546001600160a01b031633145b6119405760405162461bcd60e51b815260206004820152603c60248201527f44656274546f6b656e3a2043616c6c6572206973206e6569746865722056657360448201527f73656c4d616e61676572206e6f722053746162696c697479506f6f6c000000006064820152608401610e97565b6001600160a01b03831661297f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e97565b6001600160a01b0382166129e15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e97565b6001600160a01b0383166000908152600a602052604090205481811015612a595760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e97565b6001600160a01b038085166000908152600a6020526040808220858503905591851681529081208054849290612a90908490614d36565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612adc91815260200190565b60405180910390a35b50505050565b6000612af78484612171565b90506000198114612ae55781811015612b525760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610e97565b612ae58484848403612762565b600080612b6c8484612461565b808403925090508015612b9957600954612b979086906201000090046001600160a01b031683613557565b505b935093915050565b6000612baf878284816136d9565b612bb885613753565b509050612bc788888884613793565b905060008111612c155760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610e97565b6000612c6087612c24846137c5565b6040805160006020820152602181019390935260c09190911b6001600160c01b0319166041830152805160298184030181526049909201905290565b9050612c7088828787873461384b565b86896001600160a01b03168961ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a85604051612cb191815260200190565b60405180910390a450979650505050505050565b6000806000612cd787612c24886137c5565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090612d2e908b90309086908b908b90600401614fda565b6040805180830381865afa158015612d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6e919061502e565b92509250509550959350505050565b6000612d95896001846001600160401b0389166136d9565b612d9e87613753565b509050612dad8a8a8a84613793565b905060008111612dfb5760405162461bcd60e51b815260206004820152601960248201527813d19510dbdc994e88185b5bdd5b9d081d1bdbc81cdb585b1b603a1b6044820152606401610e97565b6000612e12338a612e0b856137c5565b8a8a6139f1565b9050612e228a828787873461384b565b888b6001600160a01b03168b61ffff167fd81fc9b8523134ed613870ed029d6170cbb73aa6a6bc311b9a642689fb9df59a85604051612e6391815260200190565b60405180910390a4509998505050505050505050565b6000612e858282613a32565b905060ff8116612ea057612e9b85858585613a8e565b61119f565b60ff811660011415612eb857612e9b85858585613b1e565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b65742074797065000000006044820152606401610e97565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6010546001600160a01b0316331480612f7357506012546001600160a01b031633145b80612f8857506011546001600160a01b031633145b6119405760405162461bcd60e51b815260206004820152605360248201527f44656274546f6b656e3a2043616c6c6572206973206e65697468657220426f7260448201527f726f7765724f7065726174696f6e73206e6f722056657373656c4d616e6167656064820152721c881b9bdc8814dd18589a5b1a5d1e541bdbdb606a1b608482015260a401610e97565b6001600160a01b0382166130765760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610e97565b6001600160a01b0382166000908152600a6020526040902054818110156130ea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610e97565b6001600160a01b0383166000908152600a602052604081208383039055600c8054849290613119908490614dda565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60608161317281601f614d36565b10156131b15760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610e97565b6131bb8284614d36565b845110156131ff5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610e97565b60608215801561321e5760405191506000825260208201604052613268565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561325757805183526020928301920161323f565b5050858452601f01601f1916604052505b50949350505050565b6000806000613284338a612e0b8b6137c5565b60405163040a7bb160e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906132db908d90309086908b908b90600401614fda565b6040805180830381865afa1580156132f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331b919061502e565b925092505097509795505050505050565b3360009081526013602052604090205460ff166119405760405162461bcd60e51b815260206004820152602960248201527f44656274546f6b656e3a2043616c6c6572206973206e6f7420612077686974656044820152686c697374656420534360b81b6064820152608401610e97565b6011546001600160a01b031633146119405760405162461bcd60e51b815260206004820152602a60248201527f44656274546f6b656e3a2043616c6c6572206973206e6f742074686520537461604482015269189a5b1a5d1e541bdbdb60b21b6064820152608401610e97565b6010546001600160a01b031633146119405760405162461bcd60e51b815260206004820152602b60248201527f44656274546f6b656e3a2043616c6c6572206973206e6f7420426f72726f776560448201526a724f7065726174696f6e7360a81b6064820152608401610e97565b6001600160a01b0382166134ce5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e97565b80600c60008282546134e09190614d36565b90915550506001600160a01b0382166000908152600a60205260408120805483929061350d908490614d36565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061356283613ca5565b33306001600160a01b0386161480159061358e5750806001600160a01b0316856001600160a01b031614155b1561359e5761359e858285612aeb565b6135a985858561291b565b50909392505050565b6000606060008060008661ffff166001600160401b038111156135d7576135d76147bb565b6040519080825280601f01601f191660200182016040528015613601576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115613623578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff1681526020019081526020016000208560405161366d9190615052565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c906136ca908790879087908790879061506e565b60405180910390a15050505050565b60065460ff16156136f5576136f084848484613d55565b612ae5565b815115612ae55760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b6064820152608401610e97565b6000806137807f0000000000000000000000000000000000000000000000000000000000000000846150c0565b905061378c8184614dda565b9150915091565b6000336001600160a01b03861681146137b1576137b1868285612aeb565b6137bb8684613016565b5090949350505050565b6000806137f27f000000000000000000000000000000000000000000000000000000000000000084614f1b565b90506001600160401b038111156110855760405162461bcd60e51b815260206004820152601a60248201527f4f4654436f72653a20616d6f756e745344206f766572666c6f770000000000006044820152606401610e97565b61ffff86166000908152600160205260408120805461386990614c11565b80601f016020809104026020016040519081016040528092919081815260200182805461389590614c11565b80156138e25780601f106138b7576101008083540402835291602001916138e2565b820191906000526020600020905b8154815290600101906020018083116138c557829003601f168201915b505050505090508051600014156139545760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610e97565b61395f878751613e34565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c58031009084906139b6908b9086908c908c908c908c906004016150d4565b6000604051808303818588803b1580156139cf57600080fd5b505af11580156139e3573d6000803e3d6000fd5b505050505050505050505050565b6060600185856001600160a01b0389168587604051602001613a189695949392919061513b565b604051602081830303815290604052905095945050505050565b6000613a3f826001614d36565b83511015613a855760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610e97565b50016001015190565b600080613a9a83613ea2565b90925090506001600160a01b038216613ab35761dead91505b6000613abe82613f27565b9050613acb878483613f5c565b9050826001600160a01b03168761ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf83604051613b0d91815260200190565b60405180910390a350505050505050565b6000806000806000613b2f86613f71565b945094509450945094506000600760008b61ffff1661ffff16815260200190815260200160002089604051613b649190615052565b90815260408051602092819003830190206001600160401b038b166000908152928190529082205490925060ff1690613b9c86613f27565b905081613bd457613bae8c3083613f5c565b6001600160401b038b166000908152602085905260409020805460ff1916600117905590505b8b8b8b8b8b8b868b60008a613bf2578c6001600160401b0316613bf4565b5a5b9050600080613c265a609663eaffd49a60e01b8e8e8e8d8d8d8d8d6040516024016126b798979695949392919061519c565b915091508115613c7f578751602089012060405161ffff8d16907fb8890edbfc1c74692f527444645f95489c3703cc2df42e4a366f5d06fa6cd88490613c71908e908e908690615210565b60405180910390a250613c8c565b613c8c8b8b8b8b8561363c565b5050505050505050505050505050505050505050505050565b6001600160a01b03811615801590613cc657506001600160a01b0381163014155b611dea5760405162461bcd60e51b815260206004820152605460248201527f44656274546f6b656e3a2043616e6e6f74207472616e7366657220746f6b656e60448201527f73206469726563746c7920746f2074686520746f6b656e20636f6e7472616374606482015273206f7220746865207a65726f206164647265737360601b608482015260a401610e97565b6000613d6083614028565b61ffff808716600090815260026020908152604080832093891683529290529081205491925090613d92908490614d36565b905060008111613de45760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610e97565b8082101561130c5760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610e97565b61ffff821660009081526003602052604090205480613e5257506127105b808211156112485760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c617267656044820152606401610e97565b60008080613eb08482613a32565b60ff16148015613ec1575082516029145b613f085760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610e97565b613f1383600d614084565b9150613f208360216140e9565b9050915091565b60006110857f00000000000000000000000000000000000000000000000000000000000000006001600160401b038416614ee6565b6000613f6783613ca5565b6124ec8383613478565b600080806060816001613f848783613a32565b60ff1614613fcf5760405162461bcd60e51b815260206004820152601860248201527713d19510dbdc994e881a5b9d985b1a59081c185e5b1bd85960421b6044820152606401610e97565b613fda86600d614084565b9350613fe78660216140e9565b9250613ff4866029614146565b94506140018660496140e9565b905061401d60518088516140159190614dda565b889190613164565b915091939590929450565b600060228251101561407c5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610e97565b506022015190565b6000614091826014614d36565b835110156140d95760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610e97565b500160200151600160601b900490565b60006140f6826008614d36565b8351101561413d5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610e97565b50016008015190565b6000614153826020614d36565b8351101561419b5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610e97565b50016020015190565b8280546141b090614c11565b90600052602060002090601f0160209004810192826141d25760008555614218565b82601f106141eb57805160ff1916838001178555614218565b82800160010185558215614218579182015b828111156142185782518255916020019190600101906141fd565b5061422492915061429c565b5090565b82805461423490614c11565b90600052602060002090601f0160209004810192826142565760008555614218565b82601f1061426f5782800160ff19823516178555614218565b82800160010185558215614218579182015b82811115614218578235825591602001919060010190614281565b5b80821115614224576000815560010161429d565b803561ffff811681146142c357600080fd5b919050565b60008083601f8401126142da57600080fd5b5081356001600160401b038111156142f157600080fd5b60208301915083602082850101111561430957600080fd5b9250929050565b80356001600160401b03811681146142c357600080fd5b6000806000806000806080878903121561434057600080fd5b614349876142b1565b955060208701356001600160401b038082111561436557600080fd5b6143718a838b016142c8565b909750955085915061438560408a01614310565b9450606089013591508082111561439b57600080fd5b506143a889828a016142c8565b979a9699509497509295939492505050565b6000602082840312156143cc57600080fd5b81356001600160e01b031981168114611c3357600080fd5b60005b838110156143ff5781810151838201526020016143e7565b83811115612ae55750506000910152565b600081518084526144288160208601602086016143e4565b601f01601f19169290920160200192915050565b602081526000611c336020830184614410565b60006020828403121561446157600080fd5b611c33826142b1565b6001600160a01b0381168114611dea57600080fd5b6000806040838503121561449257600080fd5b823561449d8161446a565b946020939093013593505050565b600080604083850312156144be57600080fd5b61449d836142b1565b6000806000606084860312156144dc57600080fd5b83356144e78161446a565b925060208401356144f78161446a565b929592945050506040919091013590565b60006060828403121561451a57600080fd5b50919050565b60008060008060008060c0878903121561453957600080fd5b86356145448161446a565b9550614552602088016142b1565b945060408701359350606087013592506080870135915060a08701356001600160401b0381111561458257600080fd5b61458e89828a01614508565b9150509295509295509295565b803580151581146142c357600080fd5b600080604083850312156145be57600080fd5b82356145c98161446a565b91506145d76020840161459b565b90509250929050565b6000806000606084860312156145f557600080fd5b83356146008161446a565b925060208401356146108161446a565b915060408401356146208161446a565b809150509250925092565b60008060008060008060a0878903121561464457600080fd5b61464d876142b1565b955060208701359450604087013593506146696060880161459b565b925060808701356001600160401b0381111561468457600080fd5b6143a889828a016142c8565b6000602082840312156146a257600080fd5b8135611c338161446a565b6000806000604084860312156146c257600080fd5b6146cb846142b1565b925060208401356001600160401b038111156146e657600080fd5b6146f2868287016142c8565b9497909650939450505050565b60008060008060008060008060006101008a8c03121561471e57600080fd5b89356147298161446a565b985061473760208b016142b1565b975060408a0135965060608a0135955060808a0135945060a08a01356001600160401b038082111561476857600080fd5b6147748d838e016142c8565b909650945084915061478860c08d01614310565b935060e08c013591508082111561479e57600080fd5b506147ab8c828d01614508565b9150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156147f9576147f96147bb565b604052919050565b60006001600160401b0382111561481a5761481a6147bb565b50601f01601f191660200190565b60008060006060848603121561483d57600080fd5b614846846142b1565b925060208401356001600160401b0381111561486157600080fd5b8401601f8101861361487257600080fd5b803561488561488082614801565b6147d1565b81815287602083850101111561489a57600080fd5b816020840160208301376000602083830101528094505050506148bf60408501614310565b90509250925092565b6000806000606084860312156148dd57600080fd5b6148e6846142b1565b92506148f46020850161459b565b91506148bf604085016142b1565b6000806040838503121561491557600080fd5b61491e836142b1565b91506145d7602084016142b1565b600080600080600080600080600060e08a8c03121561494a57600080fd5b6149538a6142b1565b985060208a0135975060408a0135965060608a01356001600160401b038082111561497d57600080fd5b6149898d838e016142c8565b909850965086915061499d60808d01614310565b95506149ab60a08d0161459b565b945060c08c01359150808211156149c157600080fd5b506149ce8c828d016142c8565b915080935050809150509295985092959850929598565b6000602082840312156149f757600080fd5b5035919050565b600080600080600060808688031215614a1657600080fd5b614a1f866142b1565b9450614a2d602087016142b1565b93506040860135925060608601356001600160401b03811115614a4f57600080fd5b614a5b888289016142c8565b969995985093965092949392505050565b60008060408385031215614a7f57600080fd5b8235614a8a8161446a565b91506020830135614a9a8161446a565b809150509250929050565b600080600060608486031215614aba57600080fd5b614ac3846142b1565b9250614ad1602085016142b1565b9150604084013590509250925092565b600060208284031215614af357600080fd5b611c338261459b565b6000806000806000806000806000806101008b8d031215614b1c57600080fd5b614b258b6142b1565b995060208b01356001600160401b0380821115614b4157600080fd5b614b4d8e838f016142c8565b909b509950899150614b6160408e01614310565b985060608d0135975060808d01359150614b7a8261446a565b90955060a08c0135945060c08c01359080821115614b9757600080fd5b50614ba48d828e016142c8565b9150809450508092505060e08b013590509295989b9194979a5092959850565b60008060008060808587031215614bda57600080fd5b614be3856142b1565b9350614bf1602086016142b1565b92506040850135614c018161446a565b9396929550929360600135925050565b600181811c90821680614c2557607f821691505b6020821081141561451a57634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b6000808335601e19843603018112614c6d57600080fd5b8301803591506001600160401b03821115614c8757600080fd5b60200191503681900382131561430957600080fd5b6020808252602d908201527f426173654f4654576974684665653a20616d6f756e74206973206c657373207460408201526c1a185b881b5a5b905b5bdd5b9d609a1b606082015260800190565b60208082526018908201527f496e76616c696420636f6e747261637420616464726573730000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614d4957614d49614d20565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff84168152604060208201526000612611604083018486614d4e565b60208082526025908201527f4665653a20666565206270206d757374206265203c3d2042505f44454e4f4d496040820152642720aa27a960d91b606082015260800190565b600082821015614dec57614dec614d20565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600061ffff808816835280871660208401525084604083015260806060830152614e45608083018486614d4e565b979650505050505050565b61ffff86168152608060208201526000614e6e608083018688614d4e565b6001600160401b0394909416604083015250606001529392505050565b61ffff8916815260c060208201526000614ea960c08301898b614d4e565b6001600160401b038816604084015286606084015285608084015282810360a0840152614ed7818587614d4e565b9b9a5050505050505050505050565b6000816000190483118215151615614f0057614f00614d20565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614f2a57614f2a614f05565b500490565b600060208284031215614f4157600080fd5b81516001600160401b03811115614f5757600080fd5b8201601f81018413614f6857600080fd5b8051614f7661488082614801565b818152856020838501011115614f8b57600080fd5b6126118260208301602086016143e4565b61ffff85168152608060208201526000614fb96080830186614410565b6001600160401b03851660408401528281036060840152614e458185614410565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061500890830186614410565b841515606084015282810360808401526150228185614410565b98975050505050505050565b6000806040838503121561504157600080fd5b505080516020909101519092909150565b600082516150648184602087016143e4565b9190910192915050565b61ffff8616815260a06020820152600061508b60a0830187614410565b6001600160401b038616604084015282810360608401526150ac8186614410565b905082810360808401526150228185614410565b6000826150cf576150cf614f05565b500690565b61ffff8716815260c0602082015260006150f160c0830188614410565b82810360408401526151038188614410565b6001600160a01b0387811660608601528616608085015283810360a0850152905061512e8185614410565b9998505050505050505050565b60ff60f81b8760f81b16815285600182015260006001600160401b0360c01b808760c01b166021840152856029840152808560c01b16604984015250825161518a8160518501602087016143e4565b91909101605101979650505050505050565b600061010061ffff8b1683528060208401526151ba8184018b614410565b6001600160401b038a166040850152606084018990526001600160a01b038816608085015260a0840187905283810360c085015290506151fa8186614410565b9150508260e08301529998505050505050505050565b6060815260006152236060830186614410565b6001600160401b03949094166020830152506040015291905056fea2646970667358221220077b75aa9fbdb9f28964a0197b1d23a26a13c0d820ea173d5485a11dae71238b64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "circulatingSupply()": {
        "details": "returns the circulating amount of tokens on current chain"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "estimateSendFee(uint16,bytes32,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _amount - amount of the tokens to transfer _useZro - indicates to use zro to pay L0 fees _adapterParam - flexible bytes array to indicate messaging adapter services in L0"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendFrom(address,uint16,bytes32,uint256,uint256,(address,address,bytes))": {
        "details": "send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from` `_from` the owner of token `_dstChainId` the destination chain identifier `_toAddress` can be any size depending on the `dstChainId`. `_amount` the quantity of tokens in wei `_minAmount` the minimum amount of tokens to receive on dstChain `_refundAddress` the address LayerZero refunds if too much message fee is sent `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "token()": {
        "details": "returns the address of the ERC20 token"
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Gravita Debt Token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract locks tokens on source, on outgoing send(), and unlocks tokens when receiving from other chains.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1724,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 1730,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 1734,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 1736,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "precrime",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2273,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "failedMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 2838,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "useCustomAdapterParams",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2846,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "creditedPackets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool)))"
      },
      {
        "astId": 4831,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "chainIdToFeeBps",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_struct(FeeConfig)4840_storage)"
      },
      {
        "astId": 4833,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "defaultFeeBp",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 4835,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "feeOwner",
        "offset": 2,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 128,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "_balances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "_name",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 3857,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "emergencyStopMintingCollateral",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3861,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "borrowerOperationsAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 3863,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "stabilityPoolAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3865,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "vesselManagerAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 3869,
        "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bool)"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bool))"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_struct(FeeConfig)4840_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct Fee.FeeConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeConfig)4840_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeConfig)4840_storage": {
        "encoding": "inplace",
        "label": "struct Fee.FeeConfig",
        "members": [
          {
            "astId": 4837,
            "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
            "label": "feeBP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4839,
            "contract": "contracts/gravita/GravitaDebtToken.sol:GravitaDebtToken",
            "label": "enabled",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}